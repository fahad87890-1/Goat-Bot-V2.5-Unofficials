const fs = require('fs-extra');
const path = require('path');

// --- C·∫§U H√åNH MODULE ---
module.exports.config = {
    name: "clean",
    version: "1.0.0",
    author: "Marrcus (C·∫£i ti·∫øn b·ªüi Gemini)",
    role: 2, // Ch·ªâ Admin bot m·ªõi c√≥ th·ªÉ d√πng
    description: {
        vi: "D·ªçn d·∫πp c√°c file r√°c trong th∆∞ m·ª•c cache c·ªßa bot ƒë·ªÉ gi·∫£i ph√≥ng dung l∆∞·ª£ng.",
        en: "Cleans junk files from the bot's cache directory to free up space."
    },
    category: "Admin",
    guide: {
        vi: 
            "   ‚Ä¢ `clean`: B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp cache.\n" +
            "   ‚Ä¢ Bot s·∫Ω h·ªèi b·∫°n mu·ªën d·ªçn d·∫πp t·ª± ƒë·ªông (to√†n b·ªô c√°c lo·∫°i file ph·ªï bi·∫øn) hay t√πy ch·ªçn.\n" +
            "      - Tr·∫£ l·ªùi 'Y' ƒë·ªÉ d·ªçn d·∫πp t·ª± ƒë·ªông.\n" +
            "      - Tr·∫£ l·ªùi 'N' ƒë·ªÉ d·ªçn d·∫πp t√πy ch·ªçn.\n" +
            "   ‚Ä¢ N·∫øu ch·ªçn 'N', bot s·∫Ω y√™u c·∫ßu b·∫°n nh·∫≠p c√°c ƒëu√¥i file c·∫ßn x√≥a (v√≠ d·ª•: mp3 jpg png).",
        en: 
            "   ‚Ä¢ `clean`: Starts the cache cleaning process.\n" +
            "   ‚Ä¢ The bot will ask if you want an automatic or custom cleanup.\n" +
            "      - Reply 'Y' for automatic cleanup.\n" +
            "      - Reply 'N' for custom cleanup.\n" +
            "   ‚Ä¢ If you choose 'N', the bot will ask you to enter the file extensions to delete (e.g., mp3 jpg png)."
    },
    countdown: 5,
};

// --- H√ÄM TI·ªÜN √çCH ---

/**
 * H√†m d·ªçn d·∫πp cache d·ª±a tr√™n danh s√°ch c√°c ƒëu√¥i file.
 * @param {string[]} extensions - M·∫£ng c√°c ƒëu√¥i file c·∫ßn x√≥a (vd: ['png', 'jpg']).
 * @returns {Promise<{deletedCount: number, errorCount: number}>} - S·ªë file ƒë√£ x√≥a v√† s·ªë file l·ªói.
 */
async function cleanCache(extensions) {
    const cachePath = path.join(__dirname, '..', '..', 'caches'); // ƒê∆∞·ªùng d·∫´n an to√†n ƒë·∫øn th∆∞ m·ª•c caches
    let deletedCount = 0;
    let errorCount = 0;

    try {
        if (!fs.existsSync(cachePath)) {
            console.log(`[CLEAN] Cache directory not found, creating one.`);
            fs.mkdirSync(cachePath, { recursive: true });
            return { deletedCount: 0, errorCount: 0 };
        }

        const files = await fs.readdir(cachePath);
        const lowerCaseExtensions = extensions.map(ext => ext.toLowerCase());

        const filesToDelete = files.filter(file => {
            const fileExt = path.extname(file).slice(1).toLowerCase();
            return lowerCaseExtensions.includes(fileExt);
        });

        if (filesToDelete.length === 0) {
            return { deletedCount: 0, errorCount: 0 };
        }

        for (const file of filesToDelete) {
            try {
                await fs.unlink(path.join(cachePath, file));
                deletedCount++;
            } catch (err) {
                console.error(`[CLEAN] Error deleting file ${file}:`, err);
                errorCount++;
            }
        }
        return { deletedCount, errorCount };
    } catch (err) {
        console.error(`[CLEAN] Error reading cache directory:`, err);
        return { deletedCount: 0, errorCount: 1 }; // L·ªói ƒë·ªçc th∆∞ m·ª•c
    }
}

// --- H√ÄM CH√çNH ---
module.exports.onStart = async function({ api, event, commandName }) {
    // Ch·ªâ admin bot m·ªõi c√≥ quy·ªÅn th·ª±c thi
    if (!global.config.ADMINBOT.includes(event.senderID)) {
        return api.sendMessage("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", event.threadID, event.messageID);
    }

    return api.sendMessage(
        "üóëÔ∏è B·∫°n mu·ªën d·ªçn d·∫πp cache t·ª± ƒë·ªông (to√†n b·ªô) hay t√πy ch·ªçn lo·∫°i file?\n\n" +
        "üëâ Tr·∫£ l·ªùi 'Y' ƒë·ªÉ d·ªçn d·∫πp t·ª± ƒë·ªông.\n" +
        "üëâ Tr·∫£ l·ªùi 'N' ƒë·ªÉ ch·ªçn lo·∫°i file c·∫ßn x√≥a.",
        event.threadID,
        (err, info) => {
            if (err) return console.error(err);
            global.GoatBot.onReply.set(info.messageID, {
                commandName,
                author: event.senderID,
                messageID: info.messageID,
                step: 'initial_choice' // B∆∞·ªõc 1: L·ª±a ch·ªçn Y/N
            });
        },
        event.messageID
    );
};

module.exports.onReply = async function({ api, event, Reply, commandName }) {
    const { author, messageID, step } = Reply;

    // Ch·ªâ ng∆∞·ªùi d√πng ban ƒë·∫ßu m·ªõi c√≥ th·ªÉ tr·∫£ l·ªùi
    if (event.senderID !== author) {
        return api.sendMessage("‚ö†Ô∏è Ch·ªâ ng∆∞·ªùi ƒë√£ g·ªçi l·ªánh m·ªõi c√≥ th·ªÉ tr·∫£ l·ªùi.", event.threadID, event.messageID);
    }
    
    // G·ª° tin nh·∫Øn h·ªèi c·ªßa bot
    api.unsendMessage(messageID);

    // X·ª≠ l√Ω b∆∞·ªõc 1: Ch·ªçn Y/N
    if (step === 'initial_choice') {
        const choice = event.body.toLowerCase();
        
        switch (choice) {
            case 'y':
            case 'yes': {
                api.sendMessage("‚è≥ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp t·ª± ƒë·ªông...", event.threadID, event.messageID);
                const defaultTypes = ["png", "jpg", "mp4", "jpeg", "gif", "m4a", "txt", "mp3", "wav", "json", "miraix", "heic", "mov", "pdf"];
                const result = await cleanCache(defaultTypes);
                
                return api.sendMessage(
                    `‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!\n" +
                    "   - ƒê√£ x√≥a: ${result.deletedCount} file.\n" +
                    "   - L·ªói: ${result.errorCount} file.`,
                    event.threadID,
                    event.messageID
                );
            }

            case 'n':
            case 'no': {
                return api.sendMessage(
                    "üìå Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi c√°c lo·∫°i file b·∫°n mu·ªën x√≥a, c√°ch nhau b·ªüi d·∫•u c√°ch.\n\n" +
                    "V√≠ d·ª•: mp3 mp4 jpg",
                    event.threadID,
                    (err, info) => {
                        if (err) return console.error(err);
                        global.GoatBot.onReply.set(info.messageID, {
                            commandName,
                            author: event.senderID,
                            messageID: info.messageID,
                            step: 'custom_choice' // B∆∞·ªõc 2: Nh·∫≠p lo·∫°i file t√πy ch·ªçn
                        });
                    },
                    event.messageID
                );
            }

            default: {
                return api.sendMessage("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng tr·∫£ l·ªùi 'Y' ho·∫∑c 'N'.", event.threadID, event.messageID);
            }
        }
    }

    // X·ª≠ l√Ω b∆∞·ªõc 2: Nh·∫≠n lo·∫°i file t√πy ch·ªçn
    if (step === 'custom_choice') {
        const customTypes = event.body.toLowerCase().split(' ').filter(type => type.trim() !== '');
        
        if (customTypes.length === 0) {
            return api.sendMessage("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p lo·∫°i file n√†o. Vui l√≤ng th·ª≠ l·∫°i.", event.threadID, event.messageID);
        }

        api.sendMessage(`‚è≥ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp c√°c file c√≥ ƒëu√¥i: ${customTypes.join(', ')}...`, event.threadID, event.messageID);
        const result = await cleanCache(customTypes);

        return api.sendMessage(
            `‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!\n" +
            "   - ƒê√£ x√≥a: ${result.deletedCount} file.\n" +
            "   - L·ªói: ${result.errorCount} file.`,
            event.threadID,
            event.messageID
        );
    }
};